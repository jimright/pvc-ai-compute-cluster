---

- name: Provision FreeIPA services
  hosts: freeipa
  gather_facts: yes
  become: yes
  tags: freeipa
  module_defaults:
    freeipa.ansible_freeipa.ipadnszone:
      ipaadmin_password: "{{ freeipa.ipaadmin_password | default(lookup('env', 'IPA_PASSWORD', default='Undefined')) }}"
    freeipa.ansible_freeipa.ipadnsrecord:
      ipaadmin_password: "{{ freeipa.ipaadmin_password | default(lookup('env', 'IPA_PASSWORD', default='Undefined')) }}"
  tasks:
    - name: Set up the local FreeIPA server
      ansible.builtin.import_role:
        name: cloudera.exe.freeipa_server
      vars:
        ipaserver_hostname: "{{ inventory_hostname }}"
        ipaserver_realm: "{{ freeipa.realm }}"
        ipaserver_domain: "{{ domain }}"
        ipaserver_no_host_dns: yes
        ipaserver_setup_firewalld: no
        ipaserver_setup_dns: yes
        # # See https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html
        # ipaserver_resolv_nameservers: ["{{ vpc_cidr | ansible.utils.ipmath(2) }}"]
        ipaserver_auto_reverse: yes
        # NOTE: Explore using DNS forwarders 
        ipaserver_no_forwarders: yes
        ipaserver_forward_policy: only
        # ipaserver_recursion_acl_cidr: "{{ vpc_cidr }}"
        ipaserver_copy_csr_to_controller: yes
        ipaserver_ca_subject: "CN=CLDR-{{ name_prefix }}-RootCA,O={{ freeipa.realm }}"
        ipaclient_mkhomedir: yes
        ipadm_password: "{{ freeipa.ipaadmin_password | default(lookup('env', 'IPA_PASSWORD', default='Undefined')) }}"
        ipaadmin_password: "{{ freeipa.ipaadmin_password | default(lookup('env', 'IPA_PASSWORD', default='Undefined')) }}"
    
    - name: Create DNS zone for '{{ domain }}' in provisioned FreeIPA service
      freeipa.ansible_freeipa.ipadnszone:
        zone_name: "{{ domain }}"
        dynamic_update: yes
        allow_sync_ptr: yes
        forward_policy: none

    - name: Create reverse DNS zone for IP address space
      freeipa.ansible_freeipa.ipadnszone:
        name_from_ip: "{{ item }}"
        dynamic_update: yes
        allow_sync_ptr: yes
      loop: "{{ freeipa_network_dns_zones }}"

    - name: Ensure dns record is present for ECS Control Plane
      freeipa.ansible_freeipa.ipadnsrecord:
        record_name: "*.apps"
        record_type: 'A'
        record_value: "{{ hostvars[groups['cluster_ecs_masters'][0]]['ansible_host'] }}"
        zone_name: "{{ domain }}"
        state: present

- name: Register all hosts with local FreeIPA server
  hosts: all:!freeipa
  gather_facts: yes
  become: yes
  tags: freeipa
  tasks:
    - name: Register host with local FreeIPA server
      ansible.builtin.import_role:
        name: cloudera.exe.freeipa_client
      vars:
        ipaserver_domain: "{{ domain }}"
        ipaserver_realm: "{{ freeipa.realm }}"
        ipa_hosts: "{{ groups['freeipa'] }}"
        ipa_server_ips: "{{ groups['freeipa'] | map('extract', hostvars, ['ansible_host']) | list }}"
        ipaadmin_password: "{{ freeipa.ipaadmin_password | default(lookup('ansible.builtin.env', 'IPA_PASSWORD', default='Undefined')) }}"
        ipaadmin_principal: "{{ freeipa.ipaadmin_user | default(lookup('ansible.builtin.env', 'IPA_USER', default=omit)) }}"
        enable_dns: yes 

    - name: Update SSSD to enable Kerberos file ticket caching
      ansible.builtin.import_role:
        name: krb_file_ticket_cache
      vars:
        sssd_domain: "{{ domain }}"

- name: Establish supporting services resources
  hosts: deployment
  gather_facts: no
  become: yes
  tags: prereq
  tasks:
    - name: Establish additional cluster host requirements
      ansible.builtin.import_role:
        name: cluster_reqs

- name: Set up CDP Private Cloud external prerequisites
  hosts: localhost
  connection: local
  gather_facts: yes
  vars:
    definition_path: "./"
  tasks:
    - name: Set of deployment variables from definition.yml
      ansible.builtin.include_role:
        name: cloudera.exe.init_deployment
        public: yes
      when: init__completed is undefined

    - name: Prepare inventory for PvC Plays
      ansible.builtin.include_role:
        name: cloudera.exe.init_deployment
        public: yes
        tasks_from: prep_pvc.yml
  tags:
    - always

- name: Init run tasks for all nodes
  hosts: all
  gather_facts: no
  tasks:
    - name: Group hosts by host template and TLS
      ansible.builtin.include_role:
        name: cloudera.cluster.deployment.groupby

    - name: Check connectivity to Inventory
      ansible.builtin.wait_for_connection:
  tags:
    - always

- name: Set up external prerequisites for CDP Private Cloud
  ansible.builtin.import_playbook: cloudera.exe.pvc_base_prereqs_ext.yml
